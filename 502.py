# coding: utf-8
""" 502. IPO

给定若干个项目。对于每个项目 i，它都有一个纯利润 Pi，并且需要最小的资本 Ci 来启动相应的项目。最初，你有 W 资本。当你完成一个项目时，你将获得纯利润，且利润将被添加到你的总资本中。

总而言之，从给定项目中选择最多 k 个不同项目的列表，以最大化最终资本，并输出最终可获得的最多资本。

示例 1:

    输入: k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].

    输出: 4

    解释:
        由于你的初始资本为 0，你尽可以从 0 号项目开始。
        在完成后，你将获得 1 的利润，你的总资本将变为 1。
        此时你可以选择开始 1 号或 2 号项目。
        由于你最多可以选择两个项目，所以你需要完成 2 号项目以获得最大的资本。
        因此，输出最后最大化的资本，为 0 + 1 + 3 = 4。

思路：贪心算法 —— 每次都对可以满足当前 W 的 Capital 中找到其中 Profits 最大的那个项目 i 进行；可以使用 大顶堆 来处理
"""


class Solution:
    def findMaximizedCapital(self, k, W, Profits, Capital):
        """
        :type k: int
        :type W: int
        :type Profits: List[int]
        :type Capital: List[int]
        :rtype: int
        """
        Combine = zip(Capital, Profits)
        Combine = sorted(Combine, key=lambda s: (s[0], s[1]))
        import heapq
        heap = []
        i = 0
        offset = 0
        while i < k:
            for index in range(offset, len(Combine)):
                if W >= Combine[index][0]:
                    # 当 W 大于 Capital，将对应的 Profit 加入大顶堆
                    heapq.heappush(heap, -Combine[index][1])
                else:
                    # 手动回退一下
                    index -= 1
                    break
            offset = index + 1
            if len(heap) > 0:
                selected = -heapq.heappop(heap)
                W = W + selected
            else:
                break
            i += 1
        return W


if __name__ == "__main__":
    s = Solution()
    k = 1
    W = 0
    Profits = [1, 2, 3]
    Capital = [1, 1, 2]

    # k = 3
    # W = 0
    # Profits = [1, 2, 3]
    # Capital = [0, 1, 1]

    # k = 74
    # W = 8
    # Profits = [75, 486, 155, 104, 72, 136, 174, 194, 368, 121, 258, 445, 160, 383, 73, 18, 437, 308, 509, 482, 227, 469, 104, 416, 257, 97, 88, 82, 181, 169, 463, 56, 182, 249, 467, 140, 328, 291, 115, 339, 511, 73, 53, 373, 220, 261, 236, 296, 284,
    #            431, 178, 94, 520, 196, 150, 172, 26, 487, 96, 285, 433, 404, 204, 130, 313, 374, 89, 140, 401, 261, 76, 370, 126, 230, 73, 509, 377, 446, 480, 504, 61, 82, 504, 85, 241, 17, 84, 412, 18, 174, 469, 10, 449, 114, 215, 340, 414, 82, 401, 61]
    # Capital = [249, 266, 110, 94, 292, 45, 290, 430, 273, 481, 142, 81, 52, 20, 323, 0, 245, 390, 455, 477, 170, 244, 34, 446, 264, 287, 341, 24, 204, 59, 199, 468, 74, 387, 470, 9, 137, 127, 51, 359, 83, 379, 82, 19, 157, 325, 17, 165, 304, 376,
    #            202, 144, 282, 0, 379, 304, 510, 370, 507, 195, 127, 422, 127, 186, 494, 429, 303, 132, 33, 250, 153, 310, 216, 29, 307, 0, 38, 67, 471, 337, 521, 118, 314, 355, 312, 247, 142, 50, 372, 499, 243, 519, 460, 6, 233, 444, 116, 330, 426, 78]
    print(s.findMaximizedCapital(k, W, Profits, Capital))
